import{m as e,c as t,R as a,I as r,M as n,a as s,b as i,L as o,d as l,A as c,T as m,e as u,S as d,f as p,P as g,g as h,h as f,i as b,j as E,k as v,l as C,n as x,o as w,p as k,B as y,q as S,r as N,s as P}from"./vendor.6f09540c.js";const R=e((e=>t({menuButton:{marginRight:e.spacing(2)}}))),A=({chooseCategory:e})=>{const t=R(),[l,c]=a.useState(null),m=()=>{c(null)};return a.createElement("div",null,a.createElement(r,{edge:"start",className:t.menuButton,color:"inherit",onClick:e=>{c(e.currentTarget)},"aria-controls":"simple-menu","aria-haspopup":"true"},a.createElement(n,null)),a.createElement(s,{id:"simple-menu",anchorEl:l,keepMounted:!0,open:Boolean(l),onClose:m},a.createElement(i,{onClick:t=>{e(t),m()}},"Command"),a.createElement(i,{onClick:t=>{e(t),m()}},"Rebase Process"),a.createElement(i,{onClick:t=>{e(t),m()}},"Merge Process"),a.createElement(i,{onClick:t=>{e(t),m()}},"HotFix Process"),a.createElement(i,{onClick:t=>{e(t),m()}},"Git config"),a.createElement(i,null,a.createElement(o,{href:"https://git-scm.com/docs",target:"_blank",color:"inherit"},"Git official doc"))))},T=e((e=>t({root:{flexGrow:1},menuButton:{marginRight:e.spacing(2)},title:{flexGrow:1,textAlign:"center",display:"none",[e.breakpoints.up("sm")]:{display:"block"}},search:{position:"relative",borderRadius:e.shape.borderRadius,backgroundColor:l(e.palette.common.white,.15),"&:hover":{backgroundColor:l(e.palette.common.white,.25)},marginLeft:0,width:"100%",[e.breakpoints.up("sm")]:{marginLeft:e.spacing(1),width:"auto"}},searchIcon:{width:e.spacing(7),height:"100%",position:"absolute",pointerEvents:"none",display:"flex",alignItems:"center",justifyContent:"center"},inputRoot:{color:"inherit"},inputInput:{padding:e.spacing(1,1,1,6),transition:e.transitions.create("width"),width:"100%",[e.breakpoints.up("sm")]:{width:0,"&:focus":{width:500}}}}))),q=({chooseCategory:e,searchChange:t,category:r})=>{const n=T();return a.createElement("div",{className:n.root},a.createElement(c,{position:"static",color:"inherit"},a.createElement(m,null,a.createElement(A,{chooseCategory:e}),a.createElement(u,{className:n.title,variant:"h4",noWrap:!0},"Git Help ",r||null),"Command"===r&&a.createElement("div",{className:n.search},a.createElement("div",{className:n.searchIcon},a.createElement(d,null)),a.createElement(p,{placeholder:"Search Command",classes:{root:n.inputRoot,input:n.inputInput},inputProps:{"aria-label":"search"},onChange:e=>t(e)})))))},j=e((e=>t({root:{backgroundColor:"#282C34",margin:"1em",padding:e.spacing(2,2),color:"#adb0bb"},textarea:{color:"#e6e5e8",width:"100%",height:"10em",backgroundColor:"#282C34"}}))),D=()=>{const e=j();return a.createElement("div",null,a.createElement(g,{className:e.root},a.createElement(u,{variant:"h5",component:"h3"},"File .gitconfig:"),a.createElement(u,{component:"p"},"Sur Linux: ~/.gitconfig"),a.createElement(u,{component:"p"},"Sur Windows: C:\\Users\\YourName"),a.createElement(u,{component:"p"},"Config simple:"),a.createElement("textarea",{className:e.textarea,defaultValue:"[user]\n        name = fabcre\n        email = mail@mail.fr\n[push]\n        default = simple\n[pull]\n        rebase = true\n[color]\n        ui = true\n[alias]\n  lo = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n'' %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all\n  st = status\n  df = diff\n  co = checkout\n  ci = commit\n  br = branch\n  stashpull = !git stash && git pull && git stash pop\n  amend = commit --amend --no-edit\n  undo = git reset --mixed HEAD^\n  addu = add -u # stages modified & deleted (\"git add .\" stages new & modified)\n  adda = add -A # stages ALL"}),a.createElement(u,{component:"p"},"Config @porteneuve:"),a.createElement("textarea",{className:e.textarea,defaultValue:"[user]\n  name = Your Full Name\n  email = your@email.tld\n[color]\n  # Enable colors in color-supporting terminals\n  ui = auto\n[alias]\n  st = status\n  ci = commit\n  lg = log --graph --date=relative --pretty=tformat:'%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%an %ad)%Creset'\n  oops = commit --amend --no-edit\n  review-local = \"!git lg @{push}..\"\n  # Or pre 2.5, as we didn't differential push and upstream in shorthands:\n  # review-local = lg @{upstream}..\n[core]\n  # Don't paginate output by default\n  pager = cat\n  #\n  # Out of luck: on Windows w/o msysGit? You may have Notepad++…\n  # editor = 'C:/Program Files (x86)/Notepad++/notepad++.exe' -multiInst -notabbar -nosession -noPlugin\n  #\n  # If you want to use Sublime Text 2's subl wrapper:\n  # editor = subl -w\n  #\n  # Or Atom, perhaps:\n  # editor = atom --wait\n  #\n  # Sublime Text 2 on Windows:\n  # editor = 'c:/Program Files (x86)/Sublime Text 2/sublime_text.exe' -w\n  #\n  # Sublime Text 3 on Windows:\n  # editor = 'c:/Program Files/Sublime Text 3/subl.exe' -w\n  #\n  # Don't consider trailing space change as a cause for merge conflicts\n  whitespace = -trailing-space\n[diff]\n  # Use better, descriptive initials (c, i, w) instead of a/b.\n  mnemonicPrefix = true\n  # Show renames/moves as such\n  renames = true\n  # When using --word-diff, assume --word-diff-regex=.\n  wordRegex = .\n  # Display submodule-related information (commit listings)\n  submodule = log\n[fetch]\n  # Auto-fetch submodule changes (sadly, won't auto-update)\n  recurseSubmodules = on-demand\n[grep]\n  # Consider most regexes to be ERE\n  extendedRegexp = true\n[log]\n  # Use abbrev SHAs whenever possible/relevant instead of full 40 chars\n  abbrevCommit = true\n  # Automatically --follow when given a single path\n  follow = true\n[merge]\n  # Display common-ancestor blocks in conflict hunks\n  conflictStyle = diff3\n[mergetool]\n  # Clean up backup files created by merge tools on tool exit\n  keepBackup = false\n  # Clean up temp files created by merge tools on tool exit\n  keepTemporaries = false\n  # Put the temp files in a dedicated dir anyway\n  writeToTemp = true\n  # Auto-accept file prompts when launching merge tools\n  prompt = false\n[pull]\n  # This is GREAT… when you know what you're doing and are careful\n  # not to pull --no-rebase over a local line containing a true merge.\n  # rebase = true\n[push]\n  # Default push should only push the current branch to its push target, regardless of its remote name\n  default = upstream\n  # When pushing, also push tags whose commit-ishs are now reachable upstream\n  followTags = true\n[rerere]\n  # If, like me, you like rerere, uncomment these\n  # autoupdate = true\n  # enabled = true\n[status]\n  # Display submodule rev change summaries in status\n  submoduleSummary = true\n  # Recursively traverse untracked directories to display all contents\n  showUntrackedFiles = all\n[color \"branch\"]\n  # Blue on black is hard to read in git branch -vv: use cyan instead\n  upstream = cyan\n[tag]\n  # Sort tags as version numbers whenever applicable, so 1.10.2 is AFTER 1.2.0.\n  sort = version:refname\n[versionsort]\n  prereleaseSuffix = -pre\n  prereleaseSuffix = .pre\n  prereleaseSuffix = -beta\n  prereleaseSuffix = .beta\n  prereleaseSuffix = -rc\n  prereleaseSuffix = .rc"})))},B=[{cmd:"git init [nom du projet]",desc:"Initialise un nouveau dépot sur la machine dans le dossier où la command est lancée.",example:"Nouveau projet Git local à partir d'un dossier local. Si on veut ensuite le partager sur GitHub, il faudra alors paramétrer le remote"},{cmd:"git clone [dépot a cloner]",desc:"Clone un dépot sur la machine dans le dossier où la command est lancée.",example:"Attention à la configuration de git: clé ssh et droit sur le dépot distant."},{cmd:"git status",desc:"Récapitule l'état local (workspace et index) des fichiers (par rapport au repo récupéré).",example:"En rouge : modifié mais non pris en compte (= en workspace), en vert : modifié et pris en compte (= ajouté à l'index)."},{cmd:"git --help [command]",desc:"Renvoi au manuel de la commande.",example:'On peut préciser une commande particulière "git --help branch"'},{cmd:"git [command] -help",desc:"Renvoi la liste des commandes disponibles.",example:'On peut préciser une commande particulière "git branch -help"'},{cmd:"git remote add origin [adresse du remote]",desc:'Créé et ajoute une nouvelle remote "origin" à l\'adresse indiqué.',example:"git remote add origin git@github.com:FabCre/test.github"},{cmd:"git push -u origin master",desc:"Le flag -u permet de sauvegarder les paramêtres dans le .git pour les prochains push."},{cmd:"git remote -v",desc:"Affiche les remotes."},{cmd:"git log",desc:"Voir l'historique des commits.",example:"git log -7 permet de voir les 7 dernier commits"},{cmd:"git show",desc:"Voir l'intégralité du commit dans le terminal.",example:"git show + 7 premiers caractères du hash du commit"},{cmd:"git diff",desc:"Affiche les modifications depuis le dernier commit dans le local.",example:"On peut ajouter le flag -w pour faire le diff sans les whitespace, indentations..."},{cmd:"git commit --amend",desc:"Permet de modifier le dernier commit en local, seuls les éléments staged sont ajoutés au commit amendé.",example:"En ajoutant le --no-edit en flag, cela permet de conserver le message du commit amendé."},{cmd:"git branch [nom de la branche]",desc:"Crée une nouvelle branche à partir de la branche et commit courant."},{cmd:"git checkout [nom de la branche]",desc:"Permet de se rendre sur la branche nommée."},{cmd:"git merge [nom de la branche]",desc:"Effectue un merge sur la branche principale, nécessite de résoudre les conflits."},{cmd:"git branch -d [nom de la branche]",desc:"Supprime la branch sur le local.",example:"On peut ajouter le flag -f pour supprimer la branche avec des changements non mergés."},{cmd:"git push origin --delete [nom de la branche]",desc:"Supprime la branch distante."},{cmd:"git stash",desc:"Met en brouillon les dernières modifications depuis le dernier commit dans le local."},{cmd:"git stash pop",desc:"Reprend ce qui à été ajouté en brouillon et le supprime du brouillon."},{cmd:"git stash apply",desc:"Applique ce qui à été ajouté en brouillon sans le supprimer du brouillon."},{cmd:"git stash list",desc:"Affiche la liste des brouillons présent sur le local."},{cmd:"git stash drop stash@{[identifiant du stash]}",desc:"Supprime le stash identifier",example:"git stash drop stash@{0}"},{cmd:"git push",desc:"Envoi les commits vers le repo distant, on peut identifier explicitement l'adresse de l'envoi.",example:"git push origin/master"},{cmd:"git pull",desc:"Recupère les derniers commits, le git pull effectue par défaut un fetch puis un merge, il est préférable d'utiliser le flag --rebase afin de placer son travail en tête de branche",example:"git pull adresse.git"},{cmd:"git add [fichier a ajouter dans le commit]",desc:"Ajoute le fichier nommée, mettre un espace entre chaque fichier à ajouter au comit. En utilisant le git add . tout est ajouté dans le commit."},{cmd:"git add -p",desc:"Permet d'effectuer une review des dernières modifications et n'ajouter que ce qui est nécessaire au présent commit. Attention, les fichiers \"untracked\" ne seront pas reviewés."},{cmd:"git reset HEAD .",desc:"Permet de supprimer les fichiers et/ou dossiers ajouter par erreur."},{cmd:"git reset [hash du commit]",desc:"Annule tous les commits après le commit ciblé, en conservant les modifications localement."},{cmd:"git reset [nom de fichier]",desc:"Enlève le fichier de l'index, mais conserve son contenu."},{cmd:"git commit",desc:"Ouvre l'éditeur de texte et permet de taper un titre de commit suivi d'un message. Attention, le titre et le message doivent être séparé par une ligne vide."},{cmd:"git commit -m [titre du commit]",desc:"Commande de raccourci pour effectuer un commit mais ne permet pas de laisser de message de commit."},{cmd:"git rebase [nom de la branche]",desc:"Applique les commits au dessus des autres commits.",example:"Se référer au rebase process."},{cmd:"git rebase --interactive",desc:"Permet de reword, fixup, saquash ou autre sur les commits qui ne sont pas encore push sur le remote."},{cmd:"git fetch --prune",desc:"Permet de synchroniser la branche et les commits entre le local et le remote."},{cmd:"git fetch --all",desc:"Permet de synchroniser toutes les branches et les commits entre le local et le remote."},{cmd:"git fetch",desc:"Permet de récupérer tout l'historique et les modifications du repo."},{cmd:"git cherry-pick [hash du commit]",desc:"Permet d'effectuer un rebase interactive avec un seul commit d'une autre branche."},{cmd:"git revert [hash du commit]",desc:"Permet de créer un commit de revert afin d'annuler son contenu."},{cmd:"git tag [nom du tag] [hash du commit]",desc:"Permet de créer un tag sur un commit pour indiquer clairement une version.",example:'git tag RC1.0 c81c9ab puis un "git push --tags" pour envoyer le tag.'}],F=e((()=>t({root:{margin:"1em"},table:{minWidth:650,backgroundColor:"#282C34"},cmd:{color:"#adb0bb",borderColor:"#adb0bb",fontSize:"medium",fontWeight:"bold"},cmdCell:{color:"#adb0bb",borderColor:"#adb0bb",fontSize:"medium",fontWeight:"normal"}}))),M=({searchValue:e})=>{const t=F();return a.createElement(g,{className:t.root},a.createElement(h,{className:t.table},a.createElement(f,null,a.createElement(b,{className:t.cmd},a.createElement(E,{className:t.cmd},"Command"),a.createElement(E,{align:"left",className:t.cmd},"Description"),a.createElement(E,{align:"left",className:t.cmd},"Example"))),a.createElement(v,null,B.filter((t=>!e||t.cmd.includes(e))).map((e=>a.createElement(b,{key:e.cmd,className:t.cmd},a.createElement(E,{component:"th",scope:"row",className:t.cmd},e.cmd),a.createElement(E,{align:"left",className:t.cmdCell},e.desc),a.createElement(E,{align:"left",className:t.cmdCell},e.example)))))))},z=["git checkout master","git pull","git checkout branchToMerge","git rebase master","git commit --amend OR git rebase -i","git push --force-with-lease","git checkout master","git merge branchToMerge","git log -4","git push"];const I=e((e=>t({root:{margin:"1em",backgroundColor:"#282C34"},button:{fontSize:"smaller",padding:"1px 7px",marginTop:e.spacing(1),marginRight:e.spacing(1)},actionsContainer:{fontSize:"smaller",padding:"1px 7px",marginBottom:e.spacing(2)},resetContainer:{fontSize:"smaller",padding:e.spacing(3)}}))),G=()=>{const e=I(),[t,r]=a.useState(0),n=()=>{r((e=>e+1))},s=()=>{r((e=>e-1))};return a.createElement("div",{className:e.root},a.createElement(C,{activeStep:t,orientation:"vertical"},z.map(((r,i)=>a.createElement(x,{key:r},a.createElement(w,null,r),a.createElement(k,null,a.createElement(u,null,function(e){switch(e){case 0:return"Se rendre sur la branche master.";case 1:return"Pull et s'assurer d'etre à jour avec la branche master.";case 2:return"Se rendre sur la branche à merger.";case 3:return"Effectuer un rebase de la branche master sur la branche à merger.";case 4:return"Effectuer un amend sur le dernier commit ou bien un rebase interactive si il y a plus d'un commit afin de refaire un historique propre.";case 5:return"Force pusher sur cette branche.";case 6:return"Se rendre sur la branche master.";case 7:return"Merger la branche avec master.";case 8:return"Faire un log pour afficher et s'assurer du bon fonctionnement du merge.";case 9:return"Push sur la branche master distante.";default:return"Etape inconnue"}}(i)),a.createElement("div",{className:e.actionsContainer},a.createElement("div",null,a.createElement(y,{disabled:0===t,onClick:s,className:e.button},"Précédent"),a.createElement(y,{variant:"contained",color:"primary",onClick:n,className:e.button},t===z.length-1?"Terminé":"Suivant")))))))),t===z.length&&a.createElement(g,{square:!0,elevation:0,className:e.resetContainer},a.createElement(u,null,"Merge Terminé!"),a.createElement(y,{onClick:()=>{r(0)},className:e.button},"Reset")))},V=["git checkout master","git checkout [hashDuCommit]","git checkout -b hotfix/leBugAFixer","git commit","Déployer en pré-production la branche hotfix et tester","Déployer en production la branche hotfix et tester","git cherry-pick [hashDuCommit]"];const W=e((e=>t({root:{margin:"1em"},button:{fontSize:"smaller",padding:"1px 7px",marginTop:e.spacing(1),marginRight:e.spacing(1)},actionsContainer:{fontSize:"smaller",padding:"1px 7px",marginBottom:e.spacing(2)},resetContainer:{fontSize:"smaller",padding:e.spacing(3)}}))),O=()=>{const e=W(),[t,r]=a.useState(0),n=()=>{r((e=>e+1))},s=()=>{r((e=>e-1))};return a.createElement("div",{className:e.root},a.createElement(C,{activeStep:t,orientation:"vertical"},V.map(((r,i)=>a.createElement(x,{key:r},a.createElement(w,null,r),a.createElement(k,null,a.createElement(u,null,function(e){switch(e){case 0:return"Se rendre sur la branche de production";case 1:return"Se rendre sur le commit actuel de la production pour se mettre à un état équivalent";case 2:return"Créer une branche à partir de la dernière version en prod, nom de la branche sous cette forme: [hotfix/leBugAFixer]";case 3:return"Commiter le fix";case 4:return"Via le système de déploiement déployer la branche en uat / pré-production puis vérifier avant la mise en production";case 5:return"Via le système de déploiement, effectuer une mise en production de cette nouvelle branche comprennant la production actuelle plus le commit de fix";case 6:return"Depuis la branche master, cherry pick du hotfix pour avoir la branche master à jour avec le hotfix inclus";default:return"Etape inconnue"}}(i)),a.createElement("div",{className:e.actionsContainer},a.createElement("div",null,a.createElement(y,{disabled:0===t,onClick:s,className:e.button},"Précédent"),a.createElement(y,{variant:"contained",color:"primary",onClick:n,className:e.button},t===V.length-1?"Terminé":"Suivant")))))))),t===V.length&&a.createElement(g,{square:!0,elevation:0,className:e.resetContainer},a.createElement(u,null,"Hotfix Terminé!"),a.createElement(y,{onClick:()=>{r(0)},className:e.button},"Reset")))},H=["git checkout -b newbranch","git commit","git checkout master","git reset --hard origin/master","git merge --ff-only [nomdela/branch]","git rebase --interactive [les 4 premiers caractères du hash]","git log","git push","git branch -D nomdela/branch","git branch","git push --delete nomdela/branch","git pull","git branch -vv"];const L=e((e=>t({root:{margin:"1em"},button:{fontSize:"smaller",padding:"1px 7px",marginTop:e.spacing(1),marginRight:e.spacing(1)},actionsContainer:{fontSize:"smaller",padding:"1px 7px",marginBottom:e.spacing(2)},resetContainer:{fontSize:"smaller",padding:e.spacing(3)}}))),U=()=>{const e=L(),[t,r]=a.useState(0),n=()=>{r((e=>e+1))},s=()=>{r((e=>e-1))};return a.createElement("div",{className:e.root},a.createElement(C,{activeStep:t,orientation:"vertical"},H.map(((r,i)=>a.createElement(x,{key:r},a.createElement(w,null,r),a.createElement(k,null,a.createElement(u,null,function(e){switch(e){case 0:return"Depuis master afin de créer une nouvelle branche pour travailler.";case 1:return"Effectuer ses commits sur cette branche.";case 2:return"Se rendre sur la branche master.";case 3:return"Attention, cette commande est à effectuer seulement si du travail a été commencé sur master.";case 4:return"Effectuer un merge en fast forward only.";case 5:return'Effectuer un rebase interactive depuis le commit, dans le rebase "pick" le premier commit dans l\'ordre chronologique et "fixup" les autres commits (idem que squash mais sans la modification du message) puis sauvegarder les changements.';case 6:return"Effectuer un log afin de vérifier le bon déroulement avant de push.";case 7:return"Effectuer un push.";case 8:return"Supprimer la branche avec force.";case 9:return"Vérifier la suppression de la branche.";case 10:return"Supprimer la branche distante.";case 11:return"Vérifier la situation en effectuant un pull.";case 12:return"Permet de comparer les branches distantes et locales.";default:return"Etape inconnue"}}(i)),a.createElement("div",{className:e.actionsContainer},a.createElement("div",null,a.createElement(y,{disabled:0===t,onClick:s,className:e.button},"Précedent"),a.createElement(y,{variant:"contained",color:"primary",onClick:n,className:e.button},t===H.length-1?"Terminé":"Suivant")))))))),t===H.length&&a.createElement(g,{square:!0,elevation:0,className:e.resetContainer},a.createElement(u,null,"Rebase Terminé!"),a.createElement(y,{onClick:()=>{r(0)},className:e.button},"Reset")))};const Y=S({overrides:{MuiAppBar:{root:{backgroundColor:"#8a85ff",color:"white !important"}},MuiPaper:{root:{color:"white",borderRadius:"0.3%",backgroundColor:"#282C34"}},MuiStepLabel:{label:{color:"white !important"}},MuiButton:{root:{color:"#adb0bb"}}}}),_=()=>{const[e,t]=a.useState("Command"),[r,n]=a.useState(null);return a.createElement("div",{className:"root"},a.createElement(N,{theme:Y},a.createElement(q,{chooseCategory:e=>{t(e.currentTarget.innerText)},searchChange:e=>{n(e.target.value)},category:e}),"Git config"===e&&a.createElement(D,null),"Command"===e&&a.createElement(M,{searchValue:r}),"Rebase Process"===e&&a.createElement(U,null),"Merge Process"===e&&a.createElement(G,null),"HotFix Process"===e&&a.createElement(O,null)))};P.render(a.createElement(_,null),document.getElementById("root"));
